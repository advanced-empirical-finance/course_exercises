# Accessing & managing financial data

**Exercises:**

1. Read the book chapters [Accessing & managing financial data](https://www.tidy-finance.org/r/accessing-and-managing-financial-data.html) and [WRDS, CRSP, and Compustat](https://www.tidy-finance.org/r/wrds-crsp-and-compustat.html) entirely. If you prefer to read Python code, the chapters are available [here](https://www.tidy-finance.org/python/accessing-and-managing-financial-data.html) and [here](https://www.tidy-finance.org/python/wrds-crsp-and-compustat.html). They may contain some advanced concepts but also a description of almost every important dataset relevant to research in empirical finance.
2. Consult the material on Absalon on how to get the raw CRSP data as a KU student. Download the raw monthly CRSP data from the Bloomberg terminals in building 26 and follow the cleaning steps described in [Downloading and Preparing CRSP](https://www.tidy-finance.org/wrds-crsp-and-compustat.html#downloading-and-preparing-crsp). To get more information on how to compute returns adjusted for delisting, follow the procedure described in Chapter 7.2 of the book *Empirical Asset Pricing*.

3. Download the file `tidy_finance_r.sqlite` from Absalon. Optimally you store it in a folder called `data` within your standard working directory for the course. The output should be similar to the results you got from exercise 2. Almost all exercises from now on will start with reading data out of this file, so make sure you familiarize yourself with this short *minimal setup to load data into your R session memory from a fresh session* (you can consult it anytime again later during the course). 

> From now on, all you need to do to access data that is stored in the database is to follow three steps: (i) Establish the connection to the SQLite database, (ii) call the table you want to extract, and (iii) collect the data. For your convenience, the following steps show all you need compactly.

```{r}
#| eval: false
    library(tidyverse)
    library(RSQLite)
    tidy_finance <- dbConnect(SQLite(), 
                              "../aef_environment/data/tidy_finance_r.sqlite", 
                              extended_types = TRUE)
    factors_ff_monthly <- tbl(tidy_finance, "factors_ff3_monthly") 
    factors_ff_monthly <- factors_ff_monthly |> collect()
``` 

4. As always (but this is important): If you need help with the SQL database, post your question on Absalon. Your TA, your peers, and I will help you!
5. Replicate the following two figures provided in the lecture slides: i) Create a time series of the number of stocks in the CRSP sample, which are listed on NASDAQ, NYSE, and AMEX. ii) Illustrate the time series of total market values (inflation-adjusted) based on industry classification `siccd`. The book *Empirical Asset Pricing* (Bali, Murrey, and Engle) provides a detailed walk-through if you need help.

**Solutions:** 
All solutions are provided in the book chapter [WRDS, CRSP, and Compustat (R version)](https://www.tidy-finance.org/r/wrds-crsp-and-compustat.html) or [WRDS, CRSP, and Compustat (Python version)](https://www.tidy-finance.org/python/wrds-crsp-and-compustat.html) and the lecture slides.

# Beta Estimation

**Exercises:**

1. Read in the clean CRSP data (`crsp_monthly`) set from the `tidy_finance_r.sqlite` file (if you do not recall how to do this, check the previous chapter)
1. Read in the Fama-French monthly market returns (`factors_ff_monthly`) from the `tidy_finance_r.sqlite` database
1. Compute the market beta $\beta_\text{AAPL}$ of ticker `AAPL` (`permno == 14593`). You can use the function `lm()` for that purpose (alternatively: compute the well-known OLS estimate $(X'X)^{-1}X'Y$ on your own).
1. For monthly data, it is common to compute $\beta_i$ based on a rolling window of length five years. Implement a rolling procedure that estimates assets market beta each month based on the last 60 observations. You can use the package `slider` or a simple `for` loop. (*Note*: this is going to be a time-consuming computational task)
1. Store the beta estimates in the `tidy_finance_r.sqlite` database as `beta_exercise` (the file `tidy_finance_r.sqlite` already contains a table `beta` with the estimated values from the textbook - it may be a good idea to compare your results with the ones we get).
1. Provide summary statistics for the cross-section of estimated betas
1. What is the theoretical prediction of CAPM concerning the relationship between market beta and expected returns? What would you expect if you create portfolios based on beta (you create a high- and a low-beta portfolio each month and track the performance over time)? How should the expected returns differ between high and low-beta portfolios?

**Solutions:**
All solutions are provided in the book chapter [Beta estimation (R version)](https://www.tidy-finance.org/r/beta-estimation.html) or [Beta estimation (Python version)](https://www.tidy-finance.org/python/beta-estimation.html)

# Univariate sorts

**Exercises:**

1. Load the monthly CRSP file, the Fama-French Factors, and the estimated betas from the `tidy_finance_r.sqlite` database. 
1. Create portfolio sorts based on the *lagged* beta. Specifically, you compute the breakpoint as the median *lag* beta each month. Then, you compute the returns of a portfolio that invests only in the stocks with a higher beta than the breakpoint and a portfolio that invests only in the stocks with a lower beta than the breakpoints. The portfolio weights can either be equal or value-weighted.
1. What are the monthly excess returns of both portfolios?
1. Does a portfolio that goes long high beta stocks and short low beta stocks yield an excess return significantly different from zero?
1. Write a general function for portfolio sorts based on a variable number of breakpoints. Then, compute portfolio returns based on *lagged* beta decile sorts. 
1. What is the CAPM alpha of the ten portfolio returns? Is this finding in line with your expectations based on the CAPM implications?
1. Does a high beta minus low beta portfolio yield abnormal excess returns? 

**Solutions:**
All solutions are provided in the book chapter [Univariate portfolio sorts (R Version)](https://www.tidy-finance.org/r/univariate-portfolio-sorts.html) or [Univariate portfolio sorts (Python Version)](https://www.tidy-finance.org/python/univariate-portfolio-sorts.html)
