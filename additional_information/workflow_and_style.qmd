# Coding workflow and code style

## Name Conventions

```{r}
#| eval: False
# Strive for:
short_flights <- flights |> filter(air_time < 60)

# Avoid:
SHORTFLIGHTS <- flights |> filter(air_time < 60)

```

As a fundamental guideline, opt for longer, descriptive names that offer clarity rather than opting for concise names for the sake of quick typing. While brief names may save minimal time during initial code composition, especially with autocomplete assistance, they can prove time-consuming when revisiting older code and attempting to decipher cryptic abbreviations.

## Spaces

Put spaces on either side of mathematical operators apart from \^ (i.e. +, -, ==, \<, …), and around the assignment operator (\<-).

```{r}
#| eval: False

a <- 2
b <- 1
d <- 2
# Strive for
z <- (a + b)^2 / d

# Avoid
z<-(a+b)^2/d


```

In python:

```{python}
#| eval: False

a = 2
b = 1
d = 2


# Strive for
z = (a + b)**2 / d

# Avoid
z=(a+b)**2/d


```

Don’t put spaces inside or outside parentheses for regular function calls. Always put a space after a comma, just like in standard English.

```{r}
#| eval: False

# Strive for}
x <- c(1, 2, 3, 4)

mean(x, na.rm = TRUE)

# Avoid
mean (x ,na.rm=TRUE)

```

## Pipes

\|\> should always have a space before it and should typically be the last thing on a line. This makes it easier to add new steps, rearrange existing steps, modify elements within a step, and get a 10,000 ft view by skimming the verbs on the left-hand side.

```{r}
#| eval: False

# Strive for 
flights |>  
  filter(!is.na(arr_delay), !is.na(tailnum)) |> 
  count(dest)

# Avoid
flights|>filter(!is.na(arr_delay), !is.na(tailnum))|>count(dest)
```

In python:

```{python}
#| eval: False

import pandas as pd


# Now pass 'flights' to Python
flights = pd.read_csv("flights.csv")

# Strive for
flights.query('not arr_delay.isna() and not tailnum.isna()') \
       .groupby('dest') \
       .count()

# Avoid
flights.query('not arr_delay.isna() and not tailnum.isna()').groupby('dest').count()


```

If the function you're chaining into has named arguments (e.g., **`mutate()`** or **`summarize()`** in R, or functions with named parameters in Python), it is beneficial to put each argument on a new line. This practice enhances readability, making it easier to add, rearrange, or modify elements within each step.

However, if the function being chained does not have named arguments (e.g., **`select()`** or **`filter()`** in R, or functions without named parameters in Python), keeping everything on one line is acceptable. If it doesn't fit on a single line, consider putting each argument on its own line for better visibility.

```{r}
#| eval: False

# Strive for
flights |>  
  group_by(tailnum) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )

# Avoid
flights |>
  group_by(
    tailnum
  ) |> 
  summarize(delay = mean(arr_delay, na.rm = TRUE), n = n())

```

In Python:

```{python}
#| eval: False

# Strive for
result_strive = flights.groupby('tailnum') \
                       .agg(delay=('arr_delay', 'mean'), n=('arr_delay', 'size')) \
                       .reset_index()

# Avoid
result_avoid = flights.groupby('tailnum').agg(delay=('arr_delay', 'mean'), n=('arr_delay', 'size')).reset_index()



```

After the first step of the pipeline, indent each line by two spaces. RStudio will automatically put the spaces in for you after a line break following a \> . If you’re putting each argument on its own line, indent by an extra two spaces. Make sure ) is on its own line, and un-indented to match the horizontal position of the function name.

```{r}
#| eval: False

# Strive for 
flights |>  
  group_by(tailnum) |> 
  summarize(
    delay = mean(arr_delay, na.rm = TRUE),
    n = n()
  )

# Avoid
flights|>
  group_by(tailnum) |> 
  summarize(
             delay = mean(arr_delay, na.rm = TRUE), 
             n = n()
           )

# Avoid
flights|>
  group_by(tailnum) |> 
  summarize(
  delay = mean(arr_delay, na.rm = TRUE), 
  n = n()
  )

```

In python:

```{python}
#| eval: False

#Strive

flights.groupby('tailnum') \
              .agg(delay=('arr_delay', 'mean'), n=('arr_delay', 'size')) \
              .reset_index()

# Avoid

flights.groupby('tailnum') \
              .agg(
                delay=('arr_delay', 'mean'), n=('arr_delay', 'size')) \
              .reset_index()




# Avoid
flights.groupby('tailnum') \
              .agg(
               delay=('arr_delay', 'mean'), n=('arr_delay', 'size')) \
              .reset_index()

```

## Styler package

First install the styler package, restart R studio. Go to "Addins", and click on "Set style". Afterwards, select the code you want to style,go again to "Addins", click on "Style selection". Try with the code below:

```{r}
#| eval: False

# Strive for
z <- (a + b)^2 / d

# Avoid
z <- (a + b)^2/d
```

Notice as the "Avoid" now ressembles "Strive"
